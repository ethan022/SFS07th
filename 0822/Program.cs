// ==========================================
// 📌 카메라와 비디오 처리 (Camera & Video)
// ==========================================
//
// 비디오(Video) = 연속된 정지 영상(이미지, Frame)의 집합
// - 예: 영화, 드라마, 유튜브 영상 모두 비디오 데이터
//
// 🎥 FPS (Frames Per Second)
// - 초당 몇 장의 프레임을 보여주는가를 의미
// - 일반적인 영상: 24fps ~ 30fps
// - 고화질 방송/게임: 60fps 이상
//
// 원리:
// - 1초에 30장의 이미지를 빠르게 보여주면 사람 눈에는 "움직이는 영상"으로 인식됨
//   (잔상 효과, Persistence of Vision)
//
// 프레임(Frame)
// - 비디오의 기본 단위 = 한 장의 이미지
// - 한 장 한 장이 모여서 동영상이 됨
//
// ------------------------------------------
// 📌 카메라 입력 처리
// ------------------------------------------
// - OpenCV의 VideoCapture 클래스를 사용
// - 웹캠 장치 번호 (0, 1, ...) 또는 비디오 파일 경로 지정
// - 매 프레임을 Mat 형식으로 읽어서 영상 처리 가능
//
// 예시:
// VideoCapture capture = new VideoCapture(0); // 0번 카메라 열기
// Mat frame = new Mat();
// capture.Read(frame); // 한 프레임 읽기
//
// ------------------------------------------
// 📌 실습 아이디어
// ------------------------------------------
// 1. 원본 카메라 영상 출력하기
// 2. 흑백 변환된 카메라 영상 출력하기
// 3. 효과(좌우 반전, 상하 반전, 확대, 4분할 등) 적용하기
//
// ------------------------------------------
// 📌 활용
// ------------------------------------------
// - 실시간 화상 회의 (Zoom, Teams, Meet)
// - 실시간 객체 검출 (CCTV, 교통 카메라, 자율주행)
// - 미디어 플레이어 (동영상 재생)
// - 증강 현실(AR), VR 콘텐츠
// ==========================================

namespace _0822
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //BasicCameraDemo.BasicCameraUsage();       // 기본 카메라 출력

            //CameraControlDemo.CameraWithControls();   // 카메라 제어 (밝기/대비 등)

            //BasicVideoPlayerDemo.PlayVideoFile();     // 비디오 파일 재생

            CameraEffectsPractice.CameraEffectsPractice1(); // 카메라 효과 실습
        }
    }
}
