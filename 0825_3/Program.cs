// 경계 검출

// 이미지에 밝기가 급격하게 변하는 지점
// 물체의 윤곽선
// 텍스처의 경계
// 그림자와 밝은 부분의 경계

// Edge 검출이 왜 중요한가?
// 물체 인식: 물체의 모양을 파악할 수 있습니다.
// 전처리 작업 : 더 복잡한 분석의 첫 단계
// 데이터 압축 : 중요한 정보만 추출
// 패턴 인식: 특정 모양이나 구조를 찾을때 

// Sobel Edge Detection
// 원리
// 미분 개념을 사용
// 이미즈를 수학적 함수로 보고, 급격한 변화 지점을 찾음
// x방향, y방향 각각의 변화량을 계산

// 장점: 구현이 간단, 속도 빠름
// 단점 : 노이즈에 민감, 두꺼운 경계선

// Scharr Edge Detection
// 원리
// Sobel의 개선 버전
// 더 정확한 미분 계산을 위해 계수 조정
// 장점: Sobel보다 정확한 결과
// 단점 : 계산량 약간 많음

// Laplacian Edge Dectection
// 원리
// 2차 미분 사용
// 모든 방향의 변화를 동시에 감지
// 하나의 커널로 모든 방향 처리

// 장정: 모든 방향 경계 검출
// 단점: 노이즈에 매우 민감

// Canny Edge Detection
// 원리 (5단계 과정)
// 1. 노이즈 제거 : Gaussian 블러 적용
// 2. 기울기 계산 : Sobel 필터 사용
// 3. 비최대 억제: 경계선을 얇게 만듬
// 4. 이중 임계값 : 강한 경계와 약한 경계구분
// 5. 연결성 분석: 약한 경계 중 강한 경계와 연결된 것만 유지

// 장점: 가장 정확한 결과, 얇은 경계선
// 단점: 복잡한 과정, 매개변수 조정 필요


namespace _0825_3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            EdgeDetection.EdgeDetectionDemo();
        }
    }
}
