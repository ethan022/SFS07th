using System;

namespace _07222
{
    /// <summary>
    /// 프로퍼티(Property) 개념 학습을 위한 Person 클래스
    /// 
    /// 프로퍼티란?
    /// - 필드에 대한 접근을 제어하는 특별한 메서드
    /// - 외부에서는 필드처럼 보이지만, 내부에서는 메서드로 동작
    /// 
    /// 왜 사용하는가?
    /// - 데이터 보호: 잘못된 값이 들어오는 것을 방지
    /// - 유효성 검사: 값을 설정할 때 조건 검사
    /// - 계산된 값: 다른 필드들을 기반으로 값을 계산
    /// - 캡슐화: 내부 구현을 숨기면서 안전한 접근 제공
    /// </summary>
    public class Person
    {
        // ============================================
        // private 필드들 (실제 데이터 저장소)
        // ============================================

        /// <summary>
        /// 이름을 저장하는 private 필드
        /// - 외부에서 직접 접근할 수 없음
        /// - 프로퍼티를 통해서만 접근 가능
        /// </summary>
        private string name;

        /// <summary>
        /// 나이를 저장하는 private 필드  
        /// - 외부에서 직접 접근할 수 없음
        /// - 프로퍼티를 통해서만 접근 가능
        /// </summary>
        private int age;

        // ============================================
        // 프로퍼티들 (Properties)
        // ============================================

        /// <summary>
        /// Name 프로퍼티 - 이름에 대한 안전한 접근 제공
        /// </summary>
        public string Name
        {
            /// <summary>
            /// getter: 값을 읽을 때 호출되는 메서드
            /// - person.Name으로 값을 읽을 때 실행됨
            /// </summary>
            get
            {
                return name;
            }
            /// <summary>
            /// setter: 값을 설정할 때 호출되는 메서드
            /// - person.Name = "김철수"로 값을 설정할 때 실행됨
            /// - value는 설정하려는 값을 나타내는 키워드
            /// </summary>
            set
            {
                name = value;
            }
        }

        /// <summary>
        /// Age 프로퍼티 - 나이에 대한 유효성 검사가 포함된 접근 제공
        /// </summary>
        public int Age
        {
            /// <summary>
            /// getter: 나이 값을 반환
            /// </summary>
            get
            {
                return age;
            }
            /// <summary>
            /// setter: 나이 값을 설정 (유효성 검사 포함)
            /// - 1~120 사이의 값만 허용
            /// - 범위를 벗어나면 오류 메시지 출력하고 값 변경하지 않음
            /// </summary>
            set
            {
                if (value > 0 && value < 120)
                {
                    age = value;
                }
                else
                {
                    Console.WriteLine($"나이는 1 ~ 120 사이의 값이어야 합니다.");
                }
            }
        }
    }
}

/*
 * ============================================
 * 사용 예제 및 동작 원리
 * ============================================
 * 
 * Person person = new Person();
 * 
 * // Name 프로퍼티 사용
 * person.Name = "김철수";        // Name의 set 메서드 호출
 * string name = person.Name;     // Name의 get 메서드 호출
 * 
 * // Age 프로퍼티 사용 (유효성 검사)
 * person.Age = 30;               // 정상: Age의 set 메서드 호출, age = 30 설정
 * person.Age = -10;              // 오류: "나이는 1 ~ 120 사이의 값이어야 합니다." 출력
 * person.Age = 150;              // 오류: "나이는 1 ~ 120 사이의 값이어야 합니다." 출력
 * 
 * int currentAge = person.Age;   // Age의 get 메서드 호출
 * 
 * ============================================
 * 프로퍼티 vs 필드 비교
 * ============================================
 * 
 * 필드 (Field) 방식:
 * public string name;           // 직접 접근, 유효성 검사 불가
 * person.name = "";             // 빈 값도 설정됨 (문제 발생 가능)
 * 
 * 프로퍼티 (Property) 방식:
 * public string Name { get; set; }  // 안전한 접근, 유효성 검사 가능
 * person.Name = "";                 // setter에서 검사 후 처리 가능
 * 
 * ============================================
 * 핵심 개념 정리
 * ============================================
 * 
 * 1. get 접근자:
 *    - 프로퍼티 값을 읽을 때 실행
 *    - 반드시 값을 return해야 함
 *    - person.Name처럼 사용
 * 
 * 2. set 접근자:
 *    - 프로퍼티 값을 설정할 때 실행
 *    - value 키워드로 설정할 값에 접근
 *    - person.Name = "값"처럼 사용
 * 
 * 3. 캡슐화:
 *    - private 필드 + public 프로퍼티 조합
 *    - 데이터는 숨기고, 접근 방법만 제공
 * 
 * 4. 유효성 검사:
 *    - set 접근자에서 조건 검사
 *    - 잘못된 값 설정 방지
 */