using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 ================================================================================================
 동물 클래스 계층 구조 - 상속과 다형성 예제
 ================================================================================================
 
 📚 이 파일의 목적:
 - 객체지향 프로그래밍의 핵심 개념 구현
 - 상속(Inheritance), 다형성(Polymorphism), 캡슐화(Encapsulation) 학습
 - 부모-자식 클래스 관계와 메서드 재정의(Override) 이해
 
 🏗️ 클래스 계층 구조:
      Animal (부모 클래스)
     ↙   ↓   ↓   ↘
   Dog  Cat Bird  (자식 클래스들)
 
 ================================================================================================
 */

namespace _0724
{
    // ==========================================
    // 부모 클래스 - Animal
    // ==========================================

    /// <summary>
    /// Animal 클래스 - 모든 동물의 공통 특성과 동작을 정의하는 기본 클래스
    /// 상속 계층의 최상위에 위치하며, 모든 동물이 공유하는 기본 기능을 제공
    /// </summary>
    public class Animal
    {
        // ========================================
        // 속성 (Properties) 정의
        // ========================================

        /*
         * Name 속성 - 자동 구현 속성 (Auto-Implemented Property)
         * 
         * 내부 동작:
         * - 컴파일러가 자동으로 private 백킹 필드를 생성
         * - private string <Name>k__BackingField;
         * - get 접근자: 백킹 필드의 값을 반환
         * - set 접근자: 백킹 필드에 값을 할당
         * 
         * 장점:
         * - 간결한 코드 작성 가능
         * - 캡슐화 원칙 유지 (외부에서 직접 필드 접근 불가)
         * - 나중에 필요시 전체 속성 구현으로 쉽게 변경 가능
         */
        public string Name { get; set; }

        // ========================================
        // 가상 메서드 (Virtual Methods)
        // ========================================

        /// <summary>
        /// MakeSound 가상 메서드 - 동물의 소리내기 동작
        /// virtual 키워드로 자식 클래스에서 재정의(override) 가능하도록 설정
        /// </summary>
        public virtual void MakeSound()
        {
            /*
             * 기본 구현:
             * - 모든 동물이 소리를 낸다는 일반적인 동작 정의
             * - 자식 클래스에서 재정의하지 않으면 이 기본 동작 실행
             * - 각 동물의 특성에 맞게 자식 클래스에서 override 권장
             */
            Console.WriteLine("동물이 소리를 냅니다.");
        }

        // ========================================
        // 일반 메서드 (Regular Methods)
        // ========================================

        /// <summary>
        /// Sleep 메서드 - 모든 동물이 공통으로 가지는 잠자는 행동
        /// virtual이 아닌 일반 메서드이므로 자식 클래스에서 재정의 불가
        /// </summary>
        public void Sleep()
        {
            /*
             * 공통 기능:
             * - 모든 동물이 동일한 방식으로 잠을 잔다고 가정
             * - Name 속성을 활용하여 개별 동물 식별
             * - 재정의 불가능한 고정된 동작
             */
            Console.WriteLine($"{Name}이(가) 잠을 잡니다.");
        }
    }

    // ==========================================
    // 자식 클래스 1 - Dog (개)
    // ==========================================

    /// <summary>
    /// Dog 클래스 - Animal을 상속받는 개를 나타내는 클래스
    /// 개만의 고유한 특성과 행동을 정의
    /// </summary>
    public class Dog : Animal
    {
        // ========================================
        // Dog 고유 속성
        // ========================================

        /*
         * Breed 속성 - 개의 품종 정보
         * 
         * Dog 클래스만의 고유 속성:
         * - Animal 클래스에는 없는 Dog 전용 정보
         * - 진돗개, 골든리트리버, 불독 등의 품종 정보 저장
         * - 자동 구현 속성으로 간결하게 정의
         */
        public string Breed { get; set; }

        // ========================================
        // 메서드 재정의 (Method Override)
        // ========================================

        /// <summary>
        /// MakeSound 메서드 재정의 - 개만의 고유한 소리
        /// override 키워드로 부모의 virtual 메서드를 재정의
        /// </summary>
        public override void MakeSound()
        {
            /*
             * 개의 고유한 소리 구현:
             * - 부모 클래스의 일반적인 "동물이 소리를 냅니다" 대신
             * - 개에 특화된 "멍멍!" 소리로 재정의
             * - Name 속성을 활용하여 어떤 개가 소리내는지 명시
             * 
             * 다형성 동작:
             * - Animal 타입으로 참조되어도 이 메서드가 실행됨
             * - 런타임에 실제 객체 타입(Dog) 확인 후 이 구현 호출
             */
            Console.WriteLine($"{Name}: 멍멍!");
        }

        // ========================================
        // Dog 고유 메서드들
        // ========================================

        /// <summary>
        /// Fetch 메서드 - 개만의 고유한 행동 (물어오기)
        /// Animal 클래스에는 없는 Dog 전용 기능
        /// </summary>
        public void Fetch()
        {
            /*
             * 개의 특별한 능력:
             * - 주인이 던진 물건을 가져오는 훈련된 행동
             * - 다른 동물들(고양이, 새 등)에게는 없는 개만의 특성
             * - 업캐스팅된 상태에서는 호출 불가 (다운캐스팅 필요)
             */
            Console.WriteLine($"{Name}이(가) 공을 가져옵니다.");
        }

        /// <summary>
        /// Guard 메서드 - 개의 또 다른 고유 행동 (경비)
        /// 집을 지키는 개의 본능적 행동을 구현
        /// </summary>
        public void Guard()
        {
            /*
             * 경비견의 역할:
             * - 집이나 영역을 보호하는 개의 본능
             * - 충성심과 보호 본능을 표현하는 행동
             * - Dog 클래스만의 고유 기능
             */
            Console.WriteLine($"{Name}이(가) 집을 지킵니다.");
        }
    }

    // ==========================================
    // 자식 클래스 2 - Cat (고양이)
    // ==========================================

    /// <summary>
    /// Cat 클래스 - Animal을 상속받는 고양이를 나타내는 클래스
    /// 고양이만의 고유한 특성과 행동을 정의
    /// </summary>
    public class Cat : Animal
    {
        // ========================================
        // Cat 고유 속성
        // ========================================

        /*
         * isIndoor 속성 - 실내 고양이 여부
         * 
         * 고양이만의 특성:
         * - 실내에서만 기르는 고양이인지 야외 고양이인지 구분
         * - bool 타입으로 true(실내묘)/false(야외묘) 저장
         * - 고양이의 생활 환경을 나타내는 중요한 정보
         */
        public bool isIndoor { get; set; }

        // ========================================
        // 메서드 재정의
        // ========================================

        /// <summary>
        /// MakeSound 메서드 재정의 - 고양이만의 고유한 소리
        /// 고양이의 특징적인 울음소리로 재정의
        /// </summary>
        public override void MakeSound()
        {
            /*
             * 고양이의 고유한 소리:
             * - "야옹!" 소리로 고양이임을 명확히 표현
             * - Dog의 "멍멍!"과 구별되는 고유한 구현
             * - 같은 MakeSound() 메서드지만 다른 동작 (다형성)
             */
            Console.WriteLine($"{Name}: 야옹!");
        }

        // ========================================
        // Cat 고유 메서드
        // ========================================

        /// <summary>
        /// Climb 메서드 - 고양이만의 고유한 행동 (나무 타기)
        /// 고양이의 뛰어난 등반 능력을 표현
        /// </summary>
        public void Climb()
        {
            /*
             * 고양이의 특별한 능력:
             * - 뛰어난 균형감각과 발톱을 이용한 등반
             * - 개나 새에게는 없는 고양이만의 독특한 행동
             * - 본능적인 사냥과 도피 행동의 일부
             */
            Console.WriteLine($"{Name}이(가) 나무에 올라갑니다.");
        }
    }

    // ==========================================
    // 자식 클래스 3 - Bird (새)
    // ==========================================

    /// <summary>
    /// Bird 클래스 - Animal을 상속받는 새를 나타내는 클래스
    /// 새만의 고유한 특성과 행동을 정의
    /// </summary>
    public class Bird : Animal
    {
        // ========================================
        // 메서드 재정의
        // ========================================

        /// <summary>
        /// MakeSound 메서드 재정의 - 새만의 고유한 소리
        /// 새의 지저귐을 표현하는 소리로 재정의
        /// </summary>
        public override void MakeSound()
        {
            /*
             * 새의 고유한 소리:
             * - "짹짹!" 소리로 새의 지저귀는 특성 표현
             * - 각 동물마다 다른 MakeSound() 구현 (다형성의 핵심)
             * - 같은 부모 메서드지만 완전히 다른 동작
             */
            Console.WriteLine($"{Name}: 짹짹!");
        }

        // ========================================
        // Bird 고유 메서드
        // ========================================

        /// <summary>
        /// Fly 메서드 - 새만의 고유한 행동 (날기)
        /// 새의 가장 특징적인 능력인 비행을 구현
        /// </summary>
        public void Fly()
        {
            /*
             * 새의 가장 특별한 능력:
             * - 하늘을 나는 새만의 독특한 이동 방식
             * - 개의 Fetch(), 고양이의 Climb()와 구별되는 고유 기능
             * - 새의 정체성을 가장 잘 나타내는 핵심 행동
             */
            Console.WriteLine($"{Name}이(가) 하늘을 날아갑니다!");
        }
    }

    /*
     ================================================================================================
     클래스 설계 원칙과 패턴 분석
     ================================================================================================
     
     🎯 상속 관계 분석:
     1. Animal (부모): 모든 동물의 공통 특성 정의
        - Name 속성: 모든 동물이 가지는 이름
        - MakeSound(): 모든 동물이 소리를 낸다는 공통 개념
        - Sleep(): 모든 동물이 잠을 잔다는 공통 행동
     
     2. 자식 클래스들 (Dog, Cat, Bird): 각각의 고유한 특성 추가
        - 고유 속성: Breed(Dog), isIndoor(Cat)
        - 고유 메서드: Fetch/Guard(Dog), Climb(Cat), Fly(Bird)
        - 재정의된 메서드: 각각 다른 MakeSound() 구현
     
     💡 다형성 동작 방식:
     1. 업캐스팅: Dog/Cat/Bird → Animal (자동, 안전)
     2. 공통 인터페이스: Animal.MakeSound() 호출
     3. 런타임 결정: 실제 객체 타입에 따른 메서드 실행
     4. 결과: 같은 코드, 다른 동작
     
     🔧 설계 장점:
     1. 확장성: 새로운 동물 클래스 쉽게 추가 가능
     2. 재사용성: Animal의 공통 기능 모든 자식이 활용
     3. 다형성: 타입에 관계없이 일관된 처리 가능
     4. 캡슐화: 각 클래스가 자신만의 고유 기능 보유
     
     🛠️ 실무 활용:
     - 게임에서 다양한 캐릭터/몬스터 관리
     - UI 프레임워크에서 다양한 컨트롤 처리
     - 데이터 처리에서 다양한 포맷 지원
     - 파일 시스템에서 다양한 파일 타입 관리
     
     ================================================================================================
     */
}