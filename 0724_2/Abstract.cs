using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 ================================================================================================
 추상 클래스 (Abstract Class) 개념 정리
 ================================================================================================
 
 📚 추상 클래스란?
 - 직접 인스턴스를 생성할 수 없는 클래스
 - 자식 클래스에서 반드시 구현해야 할 메서드를 정의
 - 공통 기능은 구현하고, 특화된 기능은 강제로 구현하게 만듦
 
 🔍 추상 클래스 vs 인터페이스 언제 사용?
 
 추상 클래스 사용 시기:
 ✅ 관련된 클래스들 간에 공통 코드를 공유하고 싶을 때
 ✅ 부분적인 구현을 제공하고 싶을 때  
 ✅ IS-A 관계 (Rectangle은 Shape이다)
 
 인터페이스 사용 시기:
 ✅ 완전히 다른 클래스들이 같은 동작을 수행해야 할 때
 ✅ 다중 상속이 필요할 때
 ✅ CAN-DO 관계 (Bird는 날 수 있다, Fish는 수영할 수 있다)
 
 ================================================================================================
 */

namespace _0724_2
{
    // ==========================================
    // 추상 클래스 정의 - Shape
    // ==========================================

    /// <summary>
    /// Shape 추상 클래스
    /// 모든 도형의 공통 특성과 동작을 정의하는 기본 클래스
    /// </summary>
    public abstract class Shape
    {
        // 공통 속성 - 모든 도형이 가지는 색상 정보
        public string Color { get; set; }

        // ========================================
        // 일반 메서드 (구현된 메서드)
        // ========================================

        /// <summary>
        /// 도형의 정보를 출력하는 공통 메서드
        /// 모든 자식 클래스가 동일하게 사용
        /// </summary>
        public void DisplayInfo()
        {
            Console.WriteLine($"색상: {Color}");

            // 추상 메서드 호출 - 런타임에 자식 클래스의 구현된 메서드 실행
            Console.WriteLine($"넓이: {GetArea():F2}");        // 소수점 2자리까지 출력
            Console.WriteLine($"둘레: {GetPerimeter():F2}");   // 소수점 2자리까지 출력
        }

        // ========================================
        // 추상 메서드 (자식 클래스에서 반드시 구현)
        // ========================================

        /// <summary>
        /// 도형의 넓이를 계산하는 추상 메서드
        /// 각 도형마다 계산 방식이 다르므로 자식 클래스에서 구현 필수
        /// </summary>
        /// <returns>도형의 넓이</returns>
        public abstract double GetArea();

        /// <summary>
        /// 도형의 둘레를 계산하는 추상 메서드
        /// 각 도형마다 계산 방식이 다르므로 자식 클래스에서 구현 필수
        /// </summary>
        /// <returns>도형의 둘레</returns>
        public abstract double GetPerimeter();

        // ========================================
        // 가상 메서드 (선택적 재정의 가능)
        // ========================================

        /// <summary>
        /// 도형을 그리는 가상 메서드
        /// 기본 구현을 제공하되, 자식 클래스에서 필요시 재정의 가능
        /// </summary>
        public virtual void Draw()
        {
            Console.WriteLine("도형을 그립니다.");
        }
    }

    // ==========================================
    // 구체적인 클래스 1 - Rectangle (직사각형)
    // ==========================================

    /// <summary>
    /// Rectangle 클래스 - Shape를 상속받는 구체적인 도형
    /// 직사각형의 특성과 동작을 구현
    /// </summary>
    public class Rectangle : Shape
    {
        // Rectangle 고유 속성들
        public double Width { get; set; }   // 가로 길이
        public double Height { get; set; }  // 세로 길이

        // ========================================
        // 추상 메서드 구현 (필수)
        // ========================================

        /// <summary>
        /// 직사각형의 넓이 계산 구현
        /// 공식: 가로 × 세로
        /// </summary>
        /// <returns>직사각형의 넓이</returns>
        public override double GetArea()
        {
            return Width * Height;
        }

        /// <summary>
        /// 직사각형의 둘레 계산 구현
        /// 공식: 2 × (가로 + 세로)
        /// </summary>
        /// <returns>직사각형의 둘레</returns>
        public override double GetPerimeter()
        {
            return 2 * (Width + Height);
        }

        // ========================================
        // 가상 메서드 재정의 (선택)
        // ========================================

        /// <summary>
        /// 직사각형 그리기 메서드 재정의
        /// 직사각형에 특화된 그리기 동작 구현
        /// </summary>
        public override void Draw()
        {
            Console.WriteLine($"{Width} x {Height} 직사각형을 그립니다.");
        }
    }

    // ==========================================
    // 구체적인 클래스 2 - Circle (원)
    // ==========================================

    /// <summary>
    /// Circle 클래스 - Shape를 상속받는 구체적인 도형
    /// 원의 특성과 동작을 구현
    /// </summary>
    public class Circle : Shape
    {
        // Circle 고유 속성
        public double Radius { get; set; }  // 반지름

        // ========================================
        // 추상 메서드 구현 (필수)
        // ========================================

        /// <summary>
        /// 원의 넓이 계산 구현
        /// 공식: π × 반지름²
        /// </summary>
        /// <returns>원의 넓이</returns>
        public override double GetArea()
        {
            return Math.PI * Radius * Radius;
        }

        /// <summary>
        /// 원의 둘레 계산 구현
        /// 공식: 2 × π × 반지름
        /// </summary>
        /// <returns>원의 둘레</returns>
        public override double GetPerimeter()
        {
            return 2 * Math.PI * Radius;
        }

        // ========================================
        // 가상 메서드 재정의 (선택)
        // ========================================

        /// <summary>
        /// 원 그리기 메서드 재정의
        /// 원에 특화된 그리기 동작 구현
        /// </summary>
        public override void Draw()
        {
            Console.WriteLine($"반지름 {Radius}인 원을 그립니다.");
        }
    }
}

/*
 ================================================================================================
 핵심 정리
 ================================================================================================
 
 🎯 추상 클래스의 핵심 특징:
 1. abstract 키워드로 선언
 2. 직접 인스턴스 생성 불가능
 3. 추상 메서드 포함 가능 (자식에서 구현 필수)
 4. 일반 메서드도 포함 가능 (공통 기능 제공)
 5. 다형성의 기반 타입 역할
 
 💡 언제 추상 클래스를 사용하나?
 - 관련된 클래스들이 공통 코드를 공유해야 할 때
 - 일부는 구현하고 일부는 강제로 구현하게 하고 싶을 때
 - IS-A 관계를 표현하고 싶을 때
 
 🔄 다형성 동작 과정:
 1. 컴파일타임: Shape 타입으로 인식
 2. 런타임: 실제 객체 타입 확인 (Circle/Rectangle)
 3. 해당 타입의 구현된 메서드 실행
 
 ================================================================================================
 */