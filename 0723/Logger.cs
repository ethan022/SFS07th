using System;

namespace _0723
{
    /// <summary>
    /// Logger 클래스 - 정적 생성자를 활용한 간단한 로깅 시스템
    /// 
    /// 주요 학습 포인트:
    /// 1. 정적 생성자 (Static Constructor)의 개념과 활용
    /// 2. 클래스가 처음 사용될 때의 초기화 과정
    /// 3. internal 접근 제한자의 의미
    /// 
    /// 정적 생성자란?
    /// - 클래스가 처음 사용될 때 단 한 번만 자동으로 실행되는 특별한 메서드
    /// - 정적 멤버를 초기화하는 데 사용됨
    /// - 매개변수를 가질 수 없고, 접근 제한자도 사용할 수 없음
    /// </summary>
    internal class Logger
    {
        // ============================================
        // 정적 필드 (Static Field)
        // ============================================

        /// <summary>
        /// 로그 파일명 (정적 필드)
        /// - 날짜 기반으로 자동 생성되는 로그 파일명
        /// - 정적 생성자에서 초기화됨
        /// </summary>
        private static string log;

        // ============================================
        // 생성자들 (Constructors)
        // ============================================

        /// <summary>
        /// 일반 인스턴스 생성자
        /// - 현재는 비어있음 (모든 기능이 정적이므로)
        /// </summary>
        public Logger()
        {
            // 인스턴스 생성 시 수행할 작업이 있다면 여기에 작성
            // 현재는 모든 기능이 정적이므로 비워둠
        }

        /// <summary>
        /// 정적 생성자 (Static Constructor)
        /// 
        /// 특징:
        /// - 클래스가 처음 사용될 때 자동으로 한 번만 실행
        /// - 매개변수를 가질 수 없음
        /// - 접근 제한자를 사용할 수 없음 (항상 private)
        /// - 호출 시점을 제어할 수 없음 (자동 호출)
        /// 
        /// 실행 시점:
        /// - 정적 멤버에 처음 접근할 때
        /// - 인스턴스를 처음 생성할 때  
        /// - 정적 메서드를 처음 호출할 때
        /// </summary>
        static Logger()
        {
            // 날짜 기반 로그 파일명 생성
            // 형식: log_20240723.txt
            log = $"log_{DateTime.Now:yyyyMMdd}.txt";

            // 초기화 완료 메시지
            Console.WriteLine("Logger 시스템이 초기화 되었습니다.");
        }

        // ============================================
        // 정적 메서드 (Static Method)
        // ============================================

        /// <summary>
        /// 로그 메시지를 작성하는 정적 메서드
        /// - 객체 생성 없이 Logger.WriteLog()로 호출 가능
        /// - 콘솔에 [LOG] 형태로 메시지 출력
        /// </summary>
        /// <param name="message">로그에 기록할 메시지</param>
        public static void WriteLog(string message)
        {
            Console.WriteLine($"[LOG] {message}");
        }
    }
}

/*
 * ============================================
 * 사용 예제 및 예상 결과
 * ============================================
 * 
 * // 첫 번째 Logger 사용 시 정적 생성자가 자동 실행됨
 * Logger.WriteLog("첫 번째 로그");
 * // 출력: Logger 시스템이 초기화 되었습니다.
 * //      [LOG] 첫 번째 로그
 * 
 * // 이후 Logger 사용 시에는 초기화 메시지 없이 바로 기록됨
 * Logger.WriteLog("두 번째 로그");  // 출력: [LOG] 두 번째 로그
 * Logger.WriteLog("세 번째 로그");  // 출력: [LOG] 세 번째 로그
 * 
 * ============================================
 * 정적 생성자의 핵심 개념
 * ============================================
 * 
 * 1. 실행 시점
 *    - 클래스가 처음 사용될 때 단 한 번만 실행
 *    - 정적 멤버 접근, 인스턴스 생성, 정적 메서드 호출 시
 * 
 * 2. 실행 순서
 *    - 정적 생성자 → 인스턴스 생성자 순으로 실행
 * 
 * 3. 제약 사항
 *    - 매개변수를 가질 수 없음
 *    - 접근 제한자 사용 불가 (항상 private)
 *    - 직접 호출할 수 없음 (자동 호출만 가능)
 * 
 * 4. 사용 용도
 *    - 정적 필드 초기화
 *    - 설정 파일 로드
 *    - 시스템 리소스 초기화
 * 
 * ============================================
 * internal 접근 제한자
 * ============================================
 * 
 * internal 키워드의 의미:
 * - 같은 어셈블리(프로젝트) 내에서만 접근 가능
 * - public보다 제한적, private보다 관대함
 * 
 * 접근 제한자 비교:
 * - public    : 모든 곳에서 접근 가능
 * - internal  : 같은 어셈블리에서만 접근 가능
 * - private   : 같은 클래스에서만 접근 가능
 */