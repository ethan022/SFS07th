// ==========================================
// 📌 색상 공간 변환 (Color Space Conversion)
// ==========================================

// 색상 공간 (Color Space)
// └ 색을 표현하는 수학적 모델 (좌표계)
// └ 같은 색도 RGB, HSV, Lab 등 다양한 방법으로 표현 가능
// └ 각 색상 공간은 장단점이 있고, 목적에 따라 선택됨

// --------------------
// 📌 실생활 예시
// --------------------
// 사진 편집 앱: 밝기만 조절하고 싶을 때 → HSV 사용
// 의료 영상: 색 차이 정확하게 측정할 때 → Lab 사용
// 웹 개발: 표준 색상 표현 → RGB 사용
// 인쇄업: 프린터 잉크 혼합 → CMYK 사용

// --------------------
// 📌 RGB (Red, Green, Blue)
// --------------------
// 가장 기본적인 색상 공간
// - 특징: 가산 혼합(Additive) → 빛을 더할수록 밝아짐
// - 디스플레이(모니터, 스마트폰)에 최적화
// - 직관적이고 가장 많이 사용됨
//
// 예시:
// RGB(255, 0, 0)   → 빨강
// RGB(0, 255, 0)   → 초록
// RGB(0, 0, 255)   → 파랑
// RGB(255, 255, 255) → 흰색
// RGB(0, 0, 0)       → 검정

// --------------------
// 📌 HSV (Hue, Saturation, Value)
// --------------------
// 인간의 색 인지와 유사한 색상 공간
// - H (색상, Hue): 0~179 (OpenCV에서는 0~180 범위 사용)
//   빨강(0), 노랑(30), 초록(60), 파랑(120), 보라(150)
// - S (채도, Saturation): 0~255 (색의 선명도)
// - V (명도, Value): 0~255 (색의 밝기)
//
// 장점:
// - 색상, 채도, 밝기를 독립적으로 조절 가능
// - 색상 기반 객체 검출에 탁월
// - 조명 변화에 강함
//
// 단점:
// - 명도가 낮을 때(H/V가 작은 값일 때) 색상 정보 불안정
// - 계산량이 RGB보다 많음

// --------------------
// 📌 Lab 색 공간
// --------------------
// 인간의 시각과 가장 유사하게 설계된 색 공간
// - L (Lightness): 밝기 (0~100)
// - a: 초록(-) ↔ 빨강(+)
// - b: 파랑(-) ↔ 노랑(+)
//
// 장점:
// - 색 차이(ΔE) 계산에 적합
// - 조명 변화와 무관하게 비교 가능
//
// 단점:
// - RGB처럼 직관적이지 않음
// - 계산 복잡도 있음

// --------------------
// 📌 Grayscale (흑백)
// --------------------
// 색상 정보 제거 → 밝기 정보만 유지 (1채널 영상)
// OpenCV 변환 공식:
// Gray = 0.299*R + 0.587*G + 0.114*B
//
// 이유: 인간의 눈은 초록(G)에 가장 민감
// - 초록: 58.7% 가중치
// - 빨강: 29.9%
// - 파랑: 11.4%

namespace _0822_1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            BasicColorConversion.BasicColorConversionDemo();
        }
    }
}
